//
//  GIFObjectsShowViewController.swift
//  GiphyAppDemo
//
//  Created by msm72 on 02.11.2017.
//  Copyright (c) 2017 RemoteJob. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Input & Output protocols
protocol GIFObjectsShowDisplayLogic: class {
    func displaySomething(viewModel: GIFObjectsShowModels.Something.ViewModel)
}

class GIFObjectsShowViewController: UIViewController {
    // MARK: - Properties
    var interactor: GIFObjectsShowBusinessLogic?
    var router: (NSObjectProtocol & GIFObjectsShowRoutingLogic & GIFObjectsShowDataPassing)?
    
    // Data source
    var items = ["San Francisco","New York","San Jose","Chicago","Los Angeles","Austin","Seattle"]
    
    // Search
    var filtered: [String] = []
    var searchActive: Bool = false
    let searchController = UISearchController(searchResultsController: nil)
    
    
    // MARK: - IBOutlets
    @IBOutlet weak var collectionView: UICollectionView! {
        didSet {
            collectionView.delegate = self
            collectionView.dataSource = self
        }
    }
    
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController  =   self
        let interactor      =   GIFObjectsShowInteractor()
        let presenter       =   GIFObjectsShowPresenter()
        let router          =   GIFObjectsShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        searchControllerCreate()
        viewSettingsDidLoad()
    }
    
    
    // MARK: - Custom Functions
    func searchControllerCreate() {
        searchController.delegate = self
        searchController.searchBar.delegate = self
        searchController.searchResultsUpdater = self

        searchController.hidesNavigationBarDuringPresentation = false
        searchController.dimsBackgroundDuringPresentation = true
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.placeholder = NSLocalizedString("Enter search keywords", comment: "Search keywords")
        searchController.searchBar.sizeToFit()
        searchController.searchBar.becomeFirstResponder()
        
        navigationItem.titleView = searchController.searchBar
//
//        navigationItem.searchController = searchController
        definesPresentationContext = true
    }
    
    func viewSettingsDidLoad() {
        let requestModel = GIFObjectsShowModels.Something.RequestModel()        
        interactor?.doSomething(request: requestModel)
    }
}


// MARK: - UICollectionViewDataSource
extension GIFObjectsShowViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        switch searchActive {
        case true:
            return filtered.count

        default:
            return items.count
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "Cell", for: indexPath) as! GIFCollectionViewCell
        
        //configureCell(cell: cell as! toolCollectionViewCell, forItemAtIndexPath: indexPath as NSIndexPath)
        
        cell.importDateTimeLabel.text = items[indexPath.row]
        
        return cell
    }
}


// MARK: - UICollectionViewDelegate
extension GIFObjectsShowViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        router?.routeToGIFObjectShow()
    }
}


// MARK: - UICollectionViewDelegateFlowLayout
extension GIFObjectsShowViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let cellWidth = (collectionView.frame.width - 8.0) / 2
        
        return CGSize.init(width: cellWidth, height: cellWidth)
    }
}


// MARK: - UISearchControllerDelegate
extension GIFObjectsShowViewController: UISearchControllerDelegate {
    func updateSearchResults(for searchController: UISearchController) {
        let searchString = searchController.searchBar.text
        
        filtered = items.filter({ (item) -> Bool in
            let countryText: NSString = item as NSString
            return (countryText.range(of: searchString!, options: NSString.CompareOptions.caseInsensitive).location) != NSNotFound
        })
        
        collectionView.reloadData()
    }
}


// MARK: - UISearchBarDelegate
extension GIFObjectsShowViewController: UISearchBarDelegate {
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        searchActive = false
        self.dismiss(animated: true, completion: nil)
    }

    func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
        searchActive = true
        collectionView.reloadData()
    }

    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchActive = false
        collectionView.reloadData()
    }

    func searchBarBookmarkButtonClicked(_ searchBar: UISearchBar) {
        if !searchActive {
            searchActive = true
            collectionView.reloadData()
        }
        
        searchController.searchBar.resignFirstResponder()
    }
}


// MARK: - UISearchResultsUpdating
extension GIFObjectsShowViewController: UISearchResultsUpdating {

}


// MARK: - GIFObjectsShowDisplayLogic
extension GIFObjectsShowViewController: GIFObjectsShowDisplayLogic {
    func displaySomething(viewModel: GIFObjectsShowModels.Something.ViewModel) {
        // NOTE: Display the result from the Presenter
        // nameTextField.text = viewModel.name
    }
}
